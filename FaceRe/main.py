import os
import cv2
import time
import threading
from deepface import DeepFace

# ·∫®n c·∫£nh b√°o TensorFlow
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

DB_PATH = "database"

# T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
if not os.path.exists(DB_PATH):
    os.makedirs(DB_PATH)

# Bi·∫øn to√†n c·ª•c d√πng cho lu·ªìng nh·∫≠n di·ªán
name = "Scanning......"
frame_to_check = None
result_lock = threading.Lock()

def select_camera():
    print("\nüñ•Ô∏è Danh s√°ch ID camera c√≥ th·ªÉ l√†:")
    print("0: Camera m·∫∑c ƒë·ªãnh (th∆∞·ªùng l√† t√≠ch h·ª£p trong laptop)")
    print("1: Camera USB r·ªùi (n·∫øu c√≥)")
    print("üëâ B·∫°n c√≥ th·ªÉ th·ª≠ nh·∫≠p 0 ho·∫∑c 1 n·∫øu kh√¥ng ch·∫Øc.")
    try:
        cam_id = int(input("Nh·∫≠p ID camera mu·ªën d√πng: "))
        return cam_id
    except ValueError:
        print("‚ö†Ô∏è ID kh√¥ng h·ª£p l·ªá. D√πng m·∫∑c ƒë·ªãnh: 0")
        return 0

def add_face_from_webcam():
    name_input = input("Nh·∫≠p t√™n ng∆∞·ªùi d√πng: ").strip()
    filename = f"{DB_PATH}/{name_input}_{{}}.jpg"

    cam_id = select_camera()
    cap = cv2.VideoCapture(cam_id)
    print("üì∏ Nh·∫•n 's' ƒë·ªÉ ch·ª•p ·∫£nh, ho·∫∑c 'q' ƒë·ªÉ tho√°t")

    count = 0
    max_images = 50

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        cv2.imshow("Ch·ª•p khu√¥n m·∫∑t m·ªõi", frame)

        key = cv2.waitKey(1) & 0xFF
        if key == ord('s'):
            if count < max_images:
                img_filename = filename.format(count + 1)
                cv2.imwrite(img_filename, frame)
                print(f"‚úÖ ƒê√£ l∆∞u ·∫£nh t·∫°i {img_filename}")
                count += 1
            else:
                print(f"‚ö†Ô∏è ƒê√£ ch·ª•p ƒë·ªß {max_images} ·∫£nh. Kh√¥ng th·ªÉ ch·ª•p th√™m.")
                break
        elif key == ord('q'):
            print("‚ùå Hu·ª∑ b·ªè thao t√°c th√™m khu√¥n m·∫∑t.")
            break

    cap.release()
    cv2.destroyAllWindows()

def recognize_face(frame, db_path=DB_PATH):
    try:
        result = DeepFace.find(img_path=frame, db_path=db_path, enforce_detection=False)
        if len(result[0]) > 0:
            identity = result[0].iloc[0]['identity']
            name_found = os.path.basename(identity).split(".")[0]

            # Lo·∫°i b·ªè ph·∫ßn "_1" n·∫øu c√≥
            if "_" in name_found:
                name_found = name_found.split("_")[0]

            return name_found
        else:
            return "Not authorized"
    except Exception as e:
        print("L·ªói:", e)
        return "Error"


def recognize_background():
    global name, frame_to_check
    while True:
        if frame_to_check is not None:
            with result_lock:
                frame = frame_to_check.copy()
                frame_to_check = None

            new_name = recognize_face(frame)
            with result_lock:
                name = new_name

def start_recognition():
    global frame_to_check, name

    recognition_thread = threading.Thread(target=recognize_background, daemon=True)
    recognition_thread.start()

    cam_id = select_camera()
    cap = cv2.VideoCapture(cam_id)
    print("üîç ƒêang ch·∫°y nh·∫≠n di·ªán khu√¥n m·∫∑t... Nh·∫•n 'q' ƒë·ªÉ tho√°t.")

    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

    frame_count = 0
    recognition_interval = 10  # Nh·∫≠n di·ªán m·ªói N frame

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)

        with result_lock:
            display_name = name

        for (x, y, w, h) in faces:
            # V·∫Ω khung vu√¥ng quanh m·∫∑t
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            # Ghi t√™n ng∆∞·ªùi nh·∫≠n di·ªán ƒë∆∞·ª£c
            cv2.putText(frame, display_name, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX,
                        0.8, (0, 255, 0), 2)

            # L·∫•y ·∫£nh nh·ªè ƒë·ªÉ nh·∫≠n di·ªán m·ªói N frame
            if frame_count % recognition_interval == 0 and frame_to_check is None:
                face_crop = frame[y:y + h, x:x + w]
                face_crop = cv2.resize(face_crop, (100, 100))  # ƒê·∫∑t k√≠ch th∆∞·ªõc ·∫£nh l√† 100x100

                with result_lock:
                    frame_to_check = face_crop.copy()

        cv2.imshow("Face Recognition", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

        frame_count += 1
        time.sleep(0.0001)

    cap.release()
    cv2.destroyAllWindows()


def main_menu():
    while True:
        print("\n=== MENU ===")
        print("1. Nh·∫≠n di·ªán khu√¥n m·∫∑t")
        print("2. Th√™m ng∆∞·ªùi d√πng m·ªõi t·ª´ webcam")
        print("0. Tho√°t")
        choice = input("Ch·ªçn ch·ª©c nƒÉng: ")

        if choice == "1":
            start_recognition()
        elif choice == "2":
            add_face_from_webcam()
        elif choice == "0":
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main_menu()
