import os
import cv2
import time
from deepface import DeepFace

# ·∫®n c·∫£nh b√°o TensorFlow
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

DB_PATH = "database"

# T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
if not os.path.exists(DB_PATH):
    os.makedirs(DB_PATH)

def select_camera():
    print("\nüñ•Ô∏è Danh s√°ch ID camera c√≥ th·ªÉ l√†:")
    print("0: Camera m·∫∑c ƒë·ªãnh (th∆∞·ªùng l√† t√≠ch h·ª£p trong laptop)")
    print("1: Camera USB r·ªùi (n·∫øu c√≥)")
    print("üëâ B·∫°n c√≥ th·ªÉ th·ª≠ nh·∫≠p 0 ho·∫∑c 1 n·∫øu kh√¥ng ch·∫Øc.")
    try:
        cam_id = int(input("Nh·∫≠p ID camera mu·ªën d√πng: "))
        return cam_id
    except ValueError:
        print("‚ö†Ô∏è ID kh√¥ng h·ª£p l·ªá. D√πng m·∫∑c ƒë·ªãnh: 0")
        return 0

def add_face_from_webcam():
    name = input("Nh·∫≠p t√™n ng∆∞·ªùi d√πng: ").strip()
    filename = f"{DB_PATH}/{name}_{{}}.jpg"  # T√™n ·∫£nh s·∫Ω c√≥ s·ªë th·ª© t·ª±

    cam_id = select_camera()
    cap = cv2.VideoCapture(cam_id)
    print("üì∏ Nh·∫•n 's' ƒë·ªÉ ch·ª•p ·∫£nh, ho·∫∑c 'q' ƒë·ªÉ tho√°t")

    count = 0  # Bi·∫øn ƒë·∫øm s·ªë ·∫£nh
    max_images = 10  # S·ªë ·∫£nh t·ªëi ƒëa

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        cv2.imshow("Ch·ª•p khu√¥n m·∫∑t m·ªõi", frame)

        key = cv2.waitKey(1) & 0xFF
        if key == ord('s'):
            if count < max_images:  # Ki·ªÉm tra s·ªë l∆∞·ª£ng ·∫£nh
                img_filename = filename.format(count + 1)
                cv2.imwrite(img_filename, frame)
                print(f"‚úÖ ƒê√£ l∆∞u ·∫£nh t·∫°i {img_filename}")
                count += 1
            else:
                print(f"‚ö†Ô∏è ƒê√£ ch·ª•p ƒë·ªß {max_images} ·∫£nh. Kh√¥ng th·ªÉ ch·ª•p th√™m.")
                break
        elif key == ord('q'):
            print("‚ùå Hu·ª∑ b·ªè thao t√°c th√™m khu√¥n m·∫∑t.")
            break

    cap.release()
    cv2.destroyAllWindows()

def recognize_face(frame, db_path=DB_PATH):
    try:
        result = DeepFace.find(img_path=frame, db_path=db_path, enforce_detection=False)
        if len(result[0]) > 0:
            identity = result[0].iloc[0]['identity']
            name = os.path.basename(identity).split(".")[0]
            return name
        else:
            return "Unknown"
    except Exception as e:
        print("L·ªói:", e)
        return "Error"

def start_recognition():
    cam_id = select_camera()
    cap = cv2.VideoCapture(cam_id)
    print("üîç ƒêang ch·∫°y nh·∫≠n di·ªán khu√¥n m·∫∑t... Nh·∫•n 'q' ƒë·ªÉ tho√°t.")

    name = "ƒêang nh·∫≠n di·ªán..."
    frame_count = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        frame_count += 1

        # Hi·ªÉn th·ªã tr∆∞·ªõc, x·ª≠ l√Ω sau
        cv2.putText(frame, name, (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        cv2.imshow("Face Recognition", frame)

        # Nh·∫≠n di·ªán m·ªói 30 frame ƒë·ªÉ tr√°nh lag
        if frame_count % 45 == 0:
            small_frame = cv2.resize(frame, (0, 0), fx=0.5, fy=0.5)
            name = recognize_face(small_frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

        time.sleep(0.0001)

    cap.release()
    cv2.destroyAllWindows()

def main_menu():
    while True:
        print("\n=== MENU ===")
        print("1. Nh·∫≠n di·ªán khu√¥n m·∫∑t")
        print("2. Th√™m ng∆∞·ªùi d√πng m·ªõi t·ª´ webcam")
        print("0. Tho√°t")
        choice = input("Ch·ªçn ch·ª©c nƒÉng: ")

        if choice == "1":
            start_recognition()
        elif choice == "2":
            add_face_from_webcam()
        elif choice == "0":
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main_menu()
